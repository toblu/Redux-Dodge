{"version":3,"sources":["fonts/ARCADECLASSIC.woff","actions/gameActions.js","reducers/gameReducer.js","actions/playerActions.js","reducers/playerReducer.js","actions/enemiesActions.js","reducers/enemiesReducer.js","reducers/rootReducer.js","selectors/gameSelectors.js","selectors/playerSelectors.js","sagas/playerSaga.js","selectors/enemySelectors.js","sagas/enemiesSaga.js","sagas/collisionSaga.js","sagas/gameSaga.js","configureStore.js","components/Cube/Cube.js","components/GameOverlay/GameOverlay.js","components/Board/Board.js","components/ScoreCard/ScoreCard.js","components/GameInfo/GameInfo.js","App.js","index.js"],"names":["module","exports","startGame","createAction","pauseGame","gameOver","setPoints","setHighscore","resetGame","initialState","points","highscore","window","localStorage","getItem","status","createReducer","state","action","payload","setItem","playerMove","pos","x","y","addEnemy","removeEnemy","moveEnemy","setEnemyInterval","list","interval","push","id","direction","filter","enemy","combineReducers","game","gameReducer","player","playerReducer","enemies","enemiesReducer","getCurrentPoints","getHighscore","getGameStatus","isGameStarted","createSelector","isGameActive","isGamePaused","isGameOver","getPlayer","getPlayerPos","handlePlayer","playerInteractionChannel","startingPos","eventChannel","emitter","keyboardListener","e","prevPos","code","END","document","addEventListener","removeEventListener","select","playerPos","call","interactionChannel","take","put","getInterval","getEnemies","getEnemy","getAllEnemyPositions","map","enemySaga","handleEnemies","enemyMoveChannel","iv","setInterval","STEP","clearInterval","generateRandomStartingPos","Math","round","random","uuid","enemyChannel","length","fork","all","count","delay","detectCollision","collisionSaga","hasCollided","enemyPositions","reduce","x1","y1","x2","y2","abs","isCollision","takeEvery","scoreSaga","gameSaga","score","playerSaga","playerTask","enemiesSaga","enemiesTask","collisionTask","pointsTask","cancel","React","memo","type","className","style","left","top","GameOverlay","children","mapDispatchToProps","gameActions","connect","gameSelectors","playerSelectors","enemySelectors","onClick","key","GameInfo","store","sagaMiddleware","createSagaMiddleware","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","devTools","run","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a70d9cd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ARCADECLASSIC.5a1a4516.woff\";","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const GAME_START = \"game/START\";\nexport const startGame = createAction(GAME_START);\n\nexport const GAME_PAUSE = \"game/PAUSE\";\nexport const pauseGame = createAction(GAME_PAUSE);\n\nexport const GAME_OVER = \"game/GAME_OVER\";\nexport const gameOver = createAction(GAME_OVER);\n\nexport const SET_POINTS = \"game/POINTS\";\nexport const setPoints = createAction(SET_POINTS);\n\nexport const SET_HIGHSCORE = \"game/SET_HIGHSCORE\";\nexport const setHighscore = createAction(SET_HIGHSCORE);\n\nexport const RESET_GAME = \"game/RESET\";\nexport const resetGame = createAction(RESET_GAME);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  startGame,\n  pauseGame,\n  gameOver,\n  setPoints,\n  setHighscore,\n  resetGame\n} from \"../actions/gameActions\";\n\nconst initialState = {\n  points: 0,\n  highscore: window.localStorage.getItem(\"highscore\") || 0,\n  status: \"NOT_STARTED\"\n};\n\nexport default createReducer(initialState, {\n  [startGame]: state => ({\n    ...state,\n    status: \"GAME_ACTIVE\"\n  }),\n\n  [pauseGame]: state => ({\n    ...state,\n    status: \"GAME_PAUSED\"\n  }),\n\n  [gameOver]: state => ({\n    ...state,\n    status: \"GAME_OVER\"\n  }),\n\n  [setPoints]: (state, action) => ({\n    ...state,\n    points: action.payload\n  }),\n\n  [setHighscore]: (state, action) => {\n    window.localStorage.setItem(\"highscore\", action.payload);\n    return {\n      ...state,\n      highscore: action.payload\n    };\n  },\n\n  [resetGame]: state => ({ ...initialState, highscore: state.highscore })\n});\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const PLAYER_MOVE = \"player/MOVE\";\nexport const playerMove = createAction(PLAYER_MOVE);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { playerMove } from \"../actions/playerActions\";\nimport { resetGame } from \"../actions/gameActions\";\n\nconst initialState = {\n  pos: {\n    x: 280,\n    y: 280\n  }\n};\n\nexport default createReducer(initialState, {\n  [playerMove]: (state, action) => ({\n    ...state,\n    pos: {\n      x: action.payload.x,\n      y: action.payload.y\n    }\n  }),\n  [resetGame]: () => initialState\n});\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const ADD_ENEMY = \"enemies/ADD\";\nexport const addEnemy = createAction(ADD_ENEMY);\n\nexport const REMOVE_ENEMY = \"enemies/REMOVE\";\nexport const removeEnemy = createAction(REMOVE_ENEMY);\n\nexport const MOVE_ENEMY = \"enemies/MOVE_ENEMY\";\nexport const moveEnemy = createAction(MOVE_ENEMY);\n\nexport const SET_INTERVAL = \"enemies/SET_INTERVAL\";\nexport const setEnemyInterval = createAction(SET_INTERVAL);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addEnemy,\n  moveEnemy,\n  removeEnemy,\n  setEnemyInterval\n} from \"../actions/enemiesActions\";\nimport { resetGame } from \"../actions/gameActions\";\n\nconst initialState = {\n  list: [],\n  interval: 500\n};\n\nexport default createReducer(initialState, {\n  [addEnemy]: (state, action) => {\n    state.list.push({\n      id: action.payload.id,\n      direction: action.payload.direction,\n      pos: { x: action.payload.x, y: action.payload.y }\n    });\n  },\n\n  [removeEnemy]: (state, action) => ({\n    ...state,\n    list: state.list.filter(enemy => enemy.id !== action.payload.id)\n  }),\n\n  [moveEnemy]: (state, action) => {\n    const enemy = state.list.filter(enemy => enemy.id === action.payload.id)[0];\n    enemy.pos = {\n      x: action.payload.x,\n      y: action.payload.y\n    };\n  },\n\n  [setEnemyInterval]: (state, action) => {\n    state.interval = action.payload;\n  },\n\n  [resetGame]: () => initialState\n});\n","import { combineReducers } from \"redux\";\nimport gameReducer from \"./gameReducer\";\nimport playerReducer from \"./playerReducer\";\nimport enemiesReducer from \"./enemiesReducer\";\n\nexport default combineReducers({\n  game: gameReducer,\n  player: playerReducer,\n  enemies: enemiesReducer\n});\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getCurrentPoints = state => state.game.points;\nexport const getHighscore = state => state.game.highscore;\nexport const getGameStatus = state => state.game.status;\n\nexport const isGameStarted = createSelector(\n  [getGameStatus],\n  status => status !== \"NOT_STARTED\"\n);\nexport const isGameActive = createSelector(\n  [getGameStatus],\n  status => status === \"GAME_ACTIVE\"\n);\nexport const isGamePaused = createSelector(\n  [getGameStatus],\n  status => status === \"GAME_PAUSED\"\n);\nexport const isGameOver = createSelector(\n  [getGameStatus],\n  status => status === \"GAME_OVER\"\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nexport const getPlayer = state => state.player;\nexport const getPlayerPos = createSelector([getPlayer], player => player.pos);\n","import { eventChannel, END } from \"redux-saga\";\nimport { take, call, select, put } from \"redux-saga/effects\";\nimport { pauseGame } from \"../actions/gameActions\";\nimport { playerMove } from \"../actions/playerActions\";\nimport { getPlayerPos } from \"../selectors/playerSelectors\";\nimport { isGameActive } from \"../selectors/gameSelectors\";\n\nconst STEP = 40;\n\nconst playerInteractionChannel = startingPos => {\n  const pos = { ...startingPos };\n\n  return eventChannel(emitter => {\n    const keyboardListener = e => {\n      const prevPos = { ...pos };\n\n      switch (e.code) {\n        case \"ArrowUp\":\n          if (pos.y >= 40) {\n            pos.y -= STEP;\n          }\n          break;\n        case \"ArrowRight\":\n          if (pos.x <= 520) {\n            pos.x += STEP;\n          }\n          break;\n        case \"ArrowDown\":\n          if (pos.y <= 520) {\n            pos.y += STEP;\n          }\n          break;\n        case \"ArrowLeft\":\n          if (pos.x >= 40) {\n            pos.x -= STEP;\n          }\n          break;\n        case \"Escape\":\n        case \"Space\":\n          return emitter(END);\n        default:\n          return;\n        // do nothing\n      }\n\n      if (pos.x !== prevPos.x || pos.y !== prevPos.y) {\n        // Emit new position\n        return emitter(pos);\n      }\n    };\n\n    // Subscribe to keyboard events\n    document.addEventListener(\"keydown\", keyboardListener);\n\n    // Clean-up event listener\n    return () => document.removeEventListener(\"keydown\", keyboardListener);\n  });\n};\n\nexport default function* handlePlayer() {\n  const playerPos = yield select(getPlayerPos);\n  const interactionChannel = yield call(playerInteractionChannel, playerPos);\n  try {\n    while (true) {\n      // Update the player position when user interacts with keyboard\n      const pos = yield take(interactionChannel);\n      yield put(playerMove(pos));\n    }\n  } finally {\n    const gameActive = yield select(isGameActive);\n    if (gameActive) {\n      // gameActive === true here means that END was emitted from the interaction channel (user paused the game)\n      // Dispatch pause action\n      yield put(pauseGame());\n    }\n  }\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getInterval = state => state.enemies.interval;\n\nexport const getEnemies = state => state.enemies.list;\n\nexport const getEnemy = (state, id) =>\n  createSelector(\n    [getEnemies],\n    enemies => enemies.filter(enemy => enemy.id === id)[0]\n  )(state);\n\nexport const getAllEnemyPositions = createSelector([getEnemies], enemies =>\n  enemies.map(enemy => enemy.pos)\n);\n","import uuid from \"uuid\";\nimport { eventChannel, END } from \"redux-saga\";\nimport { take, fork, all, select, put, delay } from \"redux-saga/effects\";\nimport {\n  addEnemy,\n  removeEnemy,\n  moveEnemy,\n  setEnemyInterval\n} from \"../actions/enemiesActions\";\nimport { getEnemies, getEnemy, getInterval } from \"../selectors/enemySelectors\";\nimport { isGameActive } from \"../selectors/gameSelectors\";\n\nconst STEP = 40;\n\nconst isOutsideOfBounds = (x, y) => x < -40 || x > 600 || y < -40 || y > 600;\n\nconst enemyMoveChannel = (startingPos, direction) => {\n  const pos = { ...startingPos };\n  return eventChannel(emitter => {\n    const iv = setInterval(() => {\n      if (isOutsideOfBounds(pos.x, pos.y)) {\n        // Enemy has moved outside of the game surface - close channel\n        emitter(END);\n      } else {\n        switch (direction) {\n          case \"U\": {\n            pos.y -= STEP / 4;\n            break;\n          }\n          case \"R\": {\n            pos.x += STEP / 4;\n            break;\n          }\n          case \"D\": {\n            pos.y += STEP / 4;\n            break;\n          }\n          case \"L\": {\n            pos.x -= STEP / 4;\n            break;\n          }\n          default:\n            break;\n        }\n        emitter(pos);\n      }\n    }, 50);\n    return () => {\n      // Unsubscribe interval\n      clearInterval(iv);\n    };\n  });\n};\n\nconst generateRandomStartingPos = () => {\n  const directions = [\"U\", \"R\", \"D\", \"L\"]; // [up, right, down, left]\n  const direction = directions[Math.round(3 * Math.random())];\n\n  switch (direction) {\n    case \"U\":\n      return {\n        x: 20 * Math.round(28 * Math.random()),\n        y: 600,\n        direction\n      };\n\n    case \"R\":\n      return {\n        x: -40,\n        y: 20 * Math.round(28 * Math.random()),\n        direction\n      };\n\n    case \"D\":\n      return {\n        x: 20 * Math.round(28 * Math.random()),\n        y: -40,\n        direction\n      };\n\n    case \"L\":\n      return {\n        x: 600,\n        y: 20 * Math.round(28 * Math.random()),\n        direction\n      };\n\n    default:\n      return {\n        x: 0,\n        y: 0\n      };\n  }\n};\n\nfunction* enemySaga(id = uuid()) {\n  if (!(yield select(getEnemy, id))) {\n    // No enemy with the given ID exists, spawn a new one\n    const { x, y, direction } = generateRandomStartingPos();\n    yield put(addEnemy({ id, x, y, direction }));\n  }\n\n  // Get the enemy pos and direction\n  const { pos, direction } = yield select(getEnemy, id);\n\n  // Create channel to handle movement\n  const enemyChannel = enemyMoveChannel(pos, direction);\n\n  try {\n    while (true) {\n      // Dispatch action each time the enemy position updates\n      const pos = yield take(enemyChannel);\n      yield put(moveEnemy({ id, x: pos.x, y: pos.y }));\n    }\n  } finally {\n    if (yield select(isGameActive)) {\n      // Remove enemy when outside of bounds\n      yield put(removeEnemy({ id }));\n    }\n  }\n}\n\nexport default function* handleEnemies() {\n  const enemies = yield select(getEnemies);\n  if (!enemies.length) {\n    // No enemies yet, spawn new enemy\n    yield fork(enemySaga);\n  } else {\n    // Trigger enemySaga for each enemy\n    yield all(enemies.map(enemy => fork(enemySaga, enemy.id)));\n  }\n  let count = 0;\n  while (true) {\n    const interval = yield select(getInterval);\n    yield delay(interval);\n    yield fork(enemySaga);\n    count++;\n    if (count % 4 === 0) {\n      // Decrease interval for every fourth enemy spawned\n      yield put(setEnemyInterval(interval * 0.9));\n    }\n  }\n}\n","import { takeEvery, select, put } from \"redux-saga/effects\";\nimport { PLAYER_MOVE } from \"../actions/playerActions\";\nimport { MOVE_ENEMY } from \"../actions/enemiesActions\";\nimport { gameOver } from \"../actions/gameActions\";\nimport { getPlayerPos } from \"../selectors/playerSelectors\";\nimport { getAllEnemyPositions } from \"../selectors/enemySelectors\";\n\nconst isCollision = ({ x: x1, y: y1 }, { x: x2, y: y2 }) =>\n  Math.abs(x1 - x2) < 40 && Math.abs(y1 - y2) < 40;\n\nconst hasCollided = (playerPos, enemyPositions) =>\n  enemyPositions.reduce(\n    (hasCollided, pos) => hasCollided || isCollision(pos, playerPos),\n    false\n  );\n\nfunction* detectCollision() {\n  const playerPos = yield select(getPlayerPos);\n  const enemyPositions = yield select(getAllEnemyPositions);\n  // Check if player has collided with any of the enemies\n  const collision = hasCollided(playerPos, enemyPositions);\n  if (collision) {\n    // Dispatch game over action\n    yield put(gameOver());\n    return;\n  }\n}\n\nexport default function* collisionSaga() {\n  // Trigger detectCollision for every time player or an enemy moves\n  yield takeEvery([PLAYER_MOVE, MOVE_ENEMY], detectCollision);\n}\n","import { take, select, put, fork, cancel, delay } from \"redux-saga/effects\";\nimport {\n  GAME_START,\n  GAME_OVER,\n  GAME_PAUSE,\n  RESET_GAME,\n  setPoints,\n  setHighscore\n} from \"../actions/gameActions\";\nimport { getCurrentPoints, getHighscore } from \"../selectors/gameSelectors\";\nimport playerSaga from \"./playerSaga\";\nimport enemiesSaga from \"./enemiesSaga\";\nimport collisionSaga from \"./collisionSaga\";\n\nfunction* scoreSaga() {\n  try {\n    while (true) {\n      const score = yield select(getCurrentPoints);\n      yield delay(1000);\n      // Increase score by 10\n      yield put(setPoints(score + 10));\n    }\n  } finally {\n    const score = yield select(getCurrentPoints);\n    const highscore = yield select(getHighscore);\n    if (score > highscore) {\n      // Update highscore\n      yield put(setHighscore(score));\n    }\n  }\n}\n\nexport default function* gameSaga() {\n  while (true) {\n    yield take(GAME_START);\n    // Start tasks\n    const playerTask = yield fork(playerSaga);\n    const enemiesTask = yield fork(enemiesSaga);\n    const collisionTask = yield fork(collisionSaga);\n    const pointsTask = yield fork(scoreSaga);\n\n    yield take([GAME_OVER, GAME_PAUSE, RESET_GAME]);\n    // Cancel all tasks\n    yield cancel(playerTask);\n    yield cancel(enemiesTask);\n    yield cancel(collisionTask);\n    yield cancel(pointsTask);\n  }\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport gameSaga from \"./sagas/gameSaga\";\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware(gameSaga);\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), sagaMiddleware],\n    devTools: true\n  });\n  sagaMiddleware.run(gameSaga);\n\n  return store;\n};\n","import React from \"react\";\nimport \"./Cube.css\";\n\nconst Cube = ({ pos, type }) => (\n  <div className={`cube ${type}`} style={{ left: pos.x, top: pos.y }}></div>\n);\n\nexport default React.memo(Cube);\n","import React from \"react\";\nimport \"./GameOverlay.css\";\n\nconst GameOverlay = ({ children }) => <div className=\"overlay\">{children}</div>;\n\nexport default GameOverlay;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Cube from \"../Cube\";\nimport GameOverlay from \"../GameOverlay\";\nimport * as gameActions from \"../../actions/gameActions\";\nimport * as gameSelectors from \"../../selectors/gameSelectors\";\nimport * as playerSelectors from \"../../selectors/playerSelectors\";\nimport * as enemySelectors from \"../../selectors/enemySelectors\";\nimport \"./Board.css\";\n\nconst Board = ({\n  startGame,\n  resetGame,\n  isGameStarted,\n  isGameActive,\n  isGamePaused,\n  isGameOver,\n  points,\n  player,\n  enemies\n}) => {\n  const renderOverlay = () => {\n    if (!isGameStarted) {\n      return (\n        <GameOverlay>\n          <button onClick={() => startGame()}>Start game</button>\n        </GameOverlay>\n      );\n    }\n    if (isGamePaused) {\n      return (\n        <>\n          <GameOverlay>\n            <h1>GAME PAUSED</h1>\n            <button onClick={() => startGame()}>RESUME</button>\n            <button onClick={() => resetGame()}>RESTART</button>\n          </GameOverlay>\n        </>\n      );\n    }\n    if (isGameOver) {\n      return (\n        <GameOverlay>\n          <h1>GAME OVER</h1>\n          <h2>SCORE: {points}</h2>\n          <button onClick={() => resetGame()}>Play again</button>\n        </GameOverlay>\n      );\n    }\n  };\n\n  return (\n    <div className=\"board\">\n      {!isGameActive && renderOverlay()}\n      {isGameStarted && <Cube type=\"player\" {...player}></Cube>}\n      {enemies.map(enemy => (\n        <Cube key={enemy.id} type=\"enemy\" {...enemy}></Cube>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isGameStarted: gameSelectors.isGameStarted(state),\n  isGameActive: gameSelectors.isGameActive(state),\n  isGamePaused: gameSelectors.isGamePaused(state),\n  isGameOver: gameSelectors.isGameOver(state),\n  points: gameSelectors.getCurrentPoints(state),\n  player: playerSelectors.getPlayer(state),\n  enemies: enemySelectors.getEnemies(state)\n});\n\nconst mapDispatchToProps = {\n  startGame: gameActions.startGame,\n  resetGame: gameActions.resetGame\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getCurrentPoints, getHighscore } from \"../../selectors/gameSelectors\";\nimport \"./ScoreCard.css\";\n\nconst ScoreCard = ({ score, highscore }) => (\n  <div className=\"score-card\">\n    <h3>Score: {score}</h3>\n    <h3>High Score: {highscore}</h3>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  score: getCurrentPoints(state),\n  highscore: getHighscore(state)\n});\n\nexport default connect(mapStateToProps)(ScoreCard);\n","import React from \"react\";\nimport \"./GameInfo.css\";\n\nconst GameInfo = () => (\n  <div className=\"game-info\">\n    <p>Use arrow keys to move</p>\n    <p>Press ESC / SPACE key to pause</p>\n  </div>\n);\n\nexport default GameInfo;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./configureStore\";\nimport Board from \"./components/Board\";\nimport ScoreCard from \"./components/ScoreCard\";\nimport GameInfo from \"./components/GameInfo\";\nimport \"./App.css\";\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <div>\n          <Board />\n          <GameInfo />\n        </div>\n        <ScoreCard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts/ARCADECLASSIC.woff\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}