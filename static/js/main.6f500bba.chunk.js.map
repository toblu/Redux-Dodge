{"version":3,"sources":["fonts/ARCADECLASSIC.woff","actions/gameActions.js","reducers/gameReducer.js","actions/playerActions.js","config.js","reducers/playerReducer.js","actions/enemiesActions.js","reducers/enemiesReducer.js","reducers/rootReducer.js","selectors/gameSelectors.js","selectors/playerSelectors.js","sagas/playerSaga.js","selectors/enemySelectors.js","sagas/enemiesSaga.js","sagas/collisionSaga.js","sagas/gameSaga.js","configureStore.js","components/Cube/Cube.js","components/Player/Player.js","components/Enemies/Enemy.js","components/Enemies/Enemies.js","components/GameOverlay/GameOverlay.js","components/Board/Board.js","components/ScoreCard/ScoreCard.js","components/GameInfo/GameInfo.js","App.js","index.js"],"names":["module","exports","startGame","createAction","pauseGame","gameOver","setPoints","setHighscore","resetGame","initialState","score","highscore","window","localStorage","getItem","status","createReducer","state","action","payload","setItem","playerMove","pos","x","config","y","addEnemy","removeEnemy","moveEnemy","setEnemyInterval","list","interval","push","id","direction","filter","enemy","combineReducers","game","gameReducer","player","playerReducer","enemies","enemiesReducer","getCurrentScore","getHighscore","getGameStatus","isGameStarted","createSelector","isGameActive","isGamePaused","isGameOver","getPlayerPos","handlePlayer","playerInteractionChannel","startingPos","eventChannel","emitter","keyboardListener","e","prevPos","code","END","document","addEventListener","removeEventListener","select","playerPos","call","interactionChannel","take","put","getInterval","getEnemies","getEnemy","getEnemyPos","getAllEnemyPositions","map","getEnemyIds","enemySaga","enemyInterval","handleEnemies","enemiesSaga","enemyMoveChannel","iv","setInterval","clearInterval","generateRandomStartingPos","Math","round","random","randomXpos","randomYpos","uuid","enemyChannel","delay","length","fork","all","detectCollision","collisionSaga","hasCollided","enemyPositions","reduce","x1","y1","x2","y2","abs","isCollision","scoreSaga","gameSaga","playerSaga","tasks","cancel","Cube","type","className","style","left","top","height","width","React","memo","connect","ownProps","enemyIds","key","GameOverlay","children","mapDispatchToProps","gameActions","gameSelectors","onClick","GameInfo","store","sagaMiddleware","createSagaMiddleware","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","devTools","run","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6f500bba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ARCADECLASSIC.5a1a4516.woff\";","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const GAME_START = \"game/START\";\nexport const startGame = createAction(GAME_START);\n\nexport const GAME_PAUSE = \"game/PAUSE\";\nexport const pauseGame = createAction(GAME_PAUSE);\n\nexport const GAME_OVER = \"game/GAME_OVER\";\nexport const gameOver = createAction(GAME_OVER);\n\nexport const SET_POINTS = \"game/SCORE\";\nexport const setPoints = createAction(SET_POINTS);\n\nexport const SET_HIGHSCORE = \"game/SET_HIGHSCORE\";\nexport const setHighscore = createAction(SET_HIGHSCORE);\n\nexport const RESET_GAME = \"game/RESET\";\nexport const resetGame = createAction(RESET_GAME);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  startGame,\n  pauseGame,\n  gameOver,\n  setPoints,\n  setHighscore,\n  resetGame\n} from \"../actions/gameActions\";\n\nconst initialState = {\n  score: 0,\n  highscore: window.localStorage.getItem(\"highscore\") || 0,\n  status: \"NOT_STARTED\"\n};\n\nexport default createReducer(initialState, {\n  [startGame]: state => ({\n    ...state,\n    status: \"GAME_ACTIVE\"\n  }),\n\n  [pauseGame]: state => ({\n    ...state,\n    status: \"GAME_PAUSED\"\n  }),\n\n  [gameOver]: state => ({\n    ...state,\n    status: \"GAME_OVER\"\n  }),\n\n  [setPoints]: (state, action) => ({\n    ...state,\n    score: action.payload\n  }),\n\n  [setHighscore]: (state, action) => {\n    window.localStorage.setItem(\"highscore\", action.payload);\n    return {\n      ...state,\n      highscore: action.payload\n    };\n  },\n\n  [resetGame]: state => ({ ...initialState, highscore: state.highscore })\n});\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const PLAYER_MOVE = \"player/MOVE\";\nexport const playerMove = createAction(PLAYER_MOVE);\n","export default {\n  boardWidth: 600,\n  boardHeight: 600,\n  cubeSize: 40,\n  playerStep: 40,\n  enemyStep: 10,\n  enemyMoveInterval: 50\n};\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { playerMove } from \"../actions/playerActions\";\nimport { resetGame } from \"../actions/gameActions\";\nimport config from \"../config\";\n\nconst initialState = {\n  pos: {\n    x: (config.boardWidth - config.cubeSize) / 2,\n    y: (config.boardHeight - config.cubeSize) / 2\n  }\n};\n\nexport default createReducer(initialState, {\n  [playerMove]: (state, action) => ({\n    ...state,\n    pos: {\n      x: action.payload.x,\n      y: action.payload.y\n    }\n  }),\n  [resetGame]: () => initialState\n});\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const ADD_ENEMY = \"enemies/ADD\";\nexport const addEnemy = createAction(ADD_ENEMY);\n\nexport const REMOVE_ENEMY = \"enemies/REMOVE\";\nexport const removeEnemy = createAction(REMOVE_ENEMY);\n\nexport const MOVE_ENEMY = \"enemies/MOVE_ENEMY\";\nexport const moveEnemy = createAction(MOVE_ENEMY);\n\nexport const SET_INTERVAL = \"enemies/SET_INTERVAL\";\nexport const setEnemyInterval = createAction(SET_INTERVAL);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addEnemy,\n  moveEnemy,\n  removeEnemy,\n  setEnemyInterval\n} from \"../actions/enemiesActions\";\nimport { resetGame } from \"../actions/gameActions\";\n\nconst initialState = {\n  list: [],\n  interval: 1000\n};\n\nexport default createReducer(initialState, {\n  [addEnemy]: (state, action) => {\n    state.list.push({\n      id: action.payload.id,\n      direction: action.payload.direction,\n      pos: { x: action.payload.x, y: action.payload.y }\n    });\n  },\n\n  [removeEnemy]: (state, action) => ({\n    ...state,\n    list: state.list.filter(enemy => enemy.id !== action.payload.id)\n  }),\n\n  [moveEnemy]: (state, action) => {\n    const enemy = state.list.filter(enemy => enemy.id === action.payload.id)[0];\n    enemy.pos = {\n      x: action.payload.x,\n      y: action.payload.y\n    };\n  },\n\n  [setEnemyInterval]: (state, action) => {\n    state.interval = action.payload;\n  },\n\n  [resetGame]: () => initialState\n});\n","import { combineReducers } from \"redux\";\nimport gameReducer from \"./gameReducer\";\nimport playerReducer from \"./playerReducer\";\nimport enemiesReducer from \"./enemiesReducer\";\n\nexport default combineReducers({\n  game: gameReducer,\n  player: playerReducer,\n  enemies: enemiesReducer\n});\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getCurrentScore = state => state.game.score;\nexport const getHighscore = state => state.game.highscore;\nexport const getGameStatus = state => state.game.status;\n\nexport const isGameStarted = createSelector(\n  [getGameStatus],\n  status => status !== \"NOT_STARTED\"\n);\nexport const isGameActive = createSelector(\n  [getGameStatus],\n  status => status === \"GAME_ACTIVE\"\n);\nexport const isGamePaused = createSelector(\n  [getGameStatus],\n  status => status === \"GAME_PAUSED\"\n);\nexport const isGameOver = createSelector(\n  [getGameStatus],\n  status => status === \"GAME_OVER\"\n);\n","import { createSelector } from \"@reduxjs/toolkit\";\nexport const getPlayer = state => state.player;\nexport const getPlayerPos = createSelector([getPlayer], player => player.pos);\n","import { eventChannel, END } from \"redux-saga\";\nimport { take, call, select, put } from \"redux-saga/effects\";\nimport { pauseGame } from \"../actions/gameActions\";\nimport { playerMove } from \"../actions/playerActions\";\nimport { getPlayerPos } from \"../selectors/playerSelectors\";\nimport { isGameActive } from \"../selectors/gameSelectors\";\nimport config from \"../config\";\n\nconst playerInteractionChannel = startingPos => {\n  const pos = { ...startingPos };\n\n  return eventChannel(emitter => {\n    const keyboardListener = e => {\n      const prevPos = { ...pos };\n\n      switch (e.code) {\n        case \"ArrowUp\":\n          if (pos.y >= config.playerStep) {\n            pos.y -= config.playerStep;\n          }\n          break;\n        case \"ArrowRight\":\n          if (\n            pos.x <=\n            config.boardWidth - config.cubeSize - config.playerStep\n          ) {\n            pos.x += config.playerStep;\n          }\n          break;\n        case \"ArrowDown\":\n          if (\n            pos.y <=\n            config.boardHeight - config.cubeSize - config.playerStep\n          ) {\n            pos.y += config.playerStep;\n          }\n          break;\n        case \"ArrowLeft\":\n          if (pos.x >= config.playerStep) {\n            pos.x -= config.playerStep;\n          }\n          break;\n        case \"Escape\":\n        case \"Space\":\n          return emitter(END);\n        default:\n          return;\n        // do nothing\n      }\n\n      if (pos.x !== prevPos.x || pos.y !== prevPos.y) {\n        // Emit new position\n        return emitter(pos);\n      }\n    };\n\n    // Subscribe to keyboard events\n    document.addEventListener(\"keydown\", keyboardListener);\n\n    // Clean-up event listener\n    return () => document.removeEventListener(\"keydown\", keyboardListener);\n  });\n};\n\nexport default function* handlePlayer() {\n  const playerPos = yield select(getPlayerPos);\n  const interactionChannel = yield call(playerInteractionChannel, playerPos);\n  try {\n    while (true) {\n      // Update the player position when user interacts with keyboard\n      const pos = yield take(interactionChannel);\n      yield put(playerMove(pos));\n    }\n  } finally {\n    const gameActive = yield select(isGameActive);\n    if (gameActive) {\n      // gameActive === true here means that END was emitted from the interaction channel (user paused the game)\n      // Dispatch pause action\n      yield put(pauseGame());\n    }\n  }\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getInterval = state => state.enemies.interval;\n\nexport const getEnemies = state => state.enemies.list;\n\nexport const getEnemy = (state, id) =>\n  createSelector(\n    [getEnemies],\n    enemies => enemies.filter(enemy => enemy.id === id)[0]\n  )(state);\n\nexport const getEnemyPos = createSelector([getEnemy], enemy => enemy.pos);\n\nexport const getAllEnemyPositions = createSelector([getEnemies], enemies =>\n  enemies.map(enemy => enemy.pos)\n);\n\nexport const getEnemyIds = createSelector([getEnemies], enemies =>\n  enemies.map(enemy => enemy.id)\n);\n","import uuid from \"uuid\";\nimport { eventChannel, END } from \"redux-saga\";\nimport { take, call, fork, all, select, put, delay } from \"redux-saga/effects\";\nimport {\n  addEnemy,\n  removeEnemy,\n  moveEnemy,\n  setEnemyInterval\n} from \"../actions/enemiesActions\";\nimport { getEnemies, getEnemy, getInterval } from \"../selectors/enemySelectors\";\nimport { isGameActive } from \"../selectors/gameSelectors\";\nimport config from \"../config\";\n\nconst isOutsideOfBounds = (x, y) =>\n  x < -config.cubeSize ||\n  x > config.boardWidth ||\n  y < -config.cubeSize ||\n  y > config.boardHeight;\n\nconst enemyMoveChannel = (startingPos, direction) => {\n  const pos = { ...startingPos };\n  return eventChannel(emitter => {\n    const iv = setInterval(() => {\n      if (isOutsideOfBounds(pos.x, pos.y)) {\n        // Enemy has moved outside of the game surface - close channel\n        emitter(END);\n      } else {\n        switch (direction) {\n          case \"U\": {\n            pos.y -= config.enemyStep;\n            break;\n          }\n          case \"R\": {\n            pos.x += config.enemyStep;\n            break;\n          }\n          case \"D\": {\n            pos.y += config.enemyStep;\n            break;\n          }\n          case \"L\": {\n            pos.x -= config.enemyStep;\n            break;\n          }\n          default:\n            break;\n        }\n        emitter(pos);\n      }\n    }, config.enemyMoveInterval);\n    return () => {\n      // Unsubscribe interval\n      clearInterval(iv);\n    };\n  });\n};\n\nconst generateRandomStartingPos = () => {\n  const directions = [\"U\", \"R\", \"D\", \"L\"]; // [up, right, down, left]\n  const direction = directions[Math.round(3 * Math.random())];\n\n  const randomXpos = () =>\n    config.cubeSize *\n    Math.round(\n      ((config.boardWidth - config.cubeSize) / config.cubeSize) * Math.random()\n    );\n\n  const randomYpos = () =>\n    config.cubeSize *\n    Math.round(\n      ((config.boardHeight - config.cubeSize) / config.cubeSize) * Math.random()\n    );\n\n  switch (direction) {\n    case \"U\":\n      return {\n        x: randomXpos(),\n        y: config.boardHeight,\n        direction\n      };\n\n    case \"R\":\n      return {\n        x: -config.cubeSize,\n        y: randomYpos(),\n        direction\n      };\n\n    case \"D\":\n      return {\n        x: randomXpos(),\n        y: -config.cubeSize,\n        direction\n      };\n\n    case \"L\":\n      return {\n        x: config.boardWidth,\n        y: randomYpos(),\n        direction\n      };\n\n    default:\n      return {\n        x: 0,\n        y: 0\n      };\n  }\n};\n\nfunction* enemySaga(id = uuid()) {\n  if (!(yield select(getEnemy, id))) {\n    // No enemy with the given ID exists, spawn a new one\n    const { x, y, direction } = generateRandomStartingPos();\n    yield put(addEnemy({ id, x, y, direction }));\n  }\n\n  // Get the enemy pos and direction\n  const { pos, direction } = yield select(getEnemy, id);\n\n  // Create channel to handle movement\n  const enemyChannel = enemyMoveChannel(pos, direction);\n\n  try {\n    while (true) {\n      // Dispatch action each time the enemy position updates\n      const pos = yield take(enemyChannel);\n      yield put(moveEnemy({ id, x: pos.x, y: pos.y }));\n    }\n  } finally {\n    if (yield select(isGameActive)) {\n      // Remove enemy when outside of bounds\n      yield put(removeEnemy({ id }));\n    }\n  }\n}\n\nfunction* enemyInterval() {\n  while (true) {\n    const interval = yield select(getInterval);\n    yield delay(2000); // Update interval every other second\n    yield put(setEnemyInterval(interval * 0.8));\n  }\n}\n\nfunction* handleEnemies() {\n  const enemies = yield select(getEnemies);\n  if (!enemies.length) {\n    // No enemies yet, spawn new enemy\n    yield fork(enemySaga);\n  } else {\n    // Trigger enemySaga for each enemy\n    yield all(enemies.map(enemy => fork(enemySaga, enemy.id)));\n  }\n  while (true) {\n    const interval = yield select(getInterval);\n    yield delay(interval);\n    yield fork(enemySaga);\n  }\n}\n\nexport default function* enemiesSaga() {\n  yield fork(enemyInterval);\n  yield call(handleEnemies);\n}\n","import { call, select, put, delay } from \"redux-saga/effects\";\nimport { gameOver } from \"../actions/gameActions\";\nimport { getPlayerPos } from \"../selectors/playerSelectors\";\nimport { getAllEnemyPositions } from \"../selectors/enemySelectors\";\nimport config from \"../config\";\n\nconst isCollision = ({ x: x1, y: y1 }, { x: x2, y: y2 }) =>\n  Math.abs(x1 - x2) < config.cubeSize && Math.abs(y1 - y2) < config.cubeSize;\n\nconst hasCollided = (playerPos, enemyPositions) =>\n  enemyPositions.reduce(\n    (hasCollided, pos) => hasCollided || isCollision(pos, playerPos),\n    false\n  );\n\nexport function* detectCollision() {\n  const playerPos = yield select(getPlayerPos);\n  const enemyPositions = yield select(getAllEnemyPositions);\n  // Check if player has collided with any of the enemies\n  const collision = yield call(hasCollided, playerPos, enemyPositions);\n  if (collision) {\n    // Dispatch game over action\n    yield put(gameOver());\n  }\n}\n\nexport default function* collisionSaga() {\n  while (true) {\n    // Trigger detectCollision every 30ms\n    yield delay(30);\n    yield call(detectCollision);\n  }\n}\n","import {\n  take,\n  select,\n  put,\n  fork,\n  all,\n  cancel,\n  delay\n} from \"redux-saga/effects\";\nimport {\n  GAME_START,\n  GAME_OVER,\n  GAME_PAUSE,\n  setPoints,\n  setHighscore\n} from \"../actions/gameActions\";\nimport { getCurrentScore, getHighscore } from \"../selectors/gameSelectors\";\nimport playerSaga from \"./playerSaga\";\nimport enemiesSaga from \"./enemiesSaga\";\nimport collisionSaga from \"./collisionSaga\";\n\nexport function* scoreSaga() {\n  try {\n    while (true) {\n      const score = yield select(getCurrentScore);\n      yield delay(1000);\n      // Increase score every second\n      yield put(setPoints(score + 10));\n    }\n  } finally {\n    const score = yield select(getCurrentScore);\n    const highscore = yield select(getHighscore);\n    if (score > highscore) {\n      // Update highscore\n      yield put(setHighscore(score));\n    }\n  }\n}\n\nexport default function* gameSaga() {\n  while (true) {\n    yield take(GAME_START);\n    // Start tasks\n    const tasks = yield all([\n      fork(playerSaga),\n      fork(enemiesSaga),\n      fork(collisionSaga),\n      fork(scoreSaga)\n    ]);\n\n    yield take([GAME_OVER, GAME_PAUSE]);\n    // Cancel all tasks\n    yield cancel(tasks);\n  }\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport gameSaga from \"./sagas/gameSaga\";\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware(gameSaga);\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), sagaMiddleware],\n    devTools: true\n  });\n  sagaMiddleware.run(gameSaga);\n\n  return store;\n};\n","import React from \"react\";\nimport config from \"../../config\";\nimport \"./Cube.css\";\n\nconst Cube = ({ pos, type }) => (\n  <div\n    className={`cube ${type}`}\n    style={{\n      left: pos.x,\n      top: pos.y,\n      height: config.cubeSize,\n      width: config.cubeSize\n    }}\n  ></div>\n);\n\nexport default Cube;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Cube from \"../Cube\";\nimport { getPlayerPos } from \"../../selectors/playerSelectors\";\n\nconst Player = ({ pos }) => <Cube type=\"player\" pos={pos}></Cube>;\n\nconst mapStateToProps = state => ({\n  pos: getPlayerPos(state)\n});\n\nexport default React.memo(connect(mapStateToProps)(Player));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Cube from \"../Cube\";\nimport { getEnemyPos } from \"../../selectors/enemySelectors\";\n\nconst Enemy = ({ pos }) => <Cube type=\"enemy\" pos={pos} />;\n\nconst mapStateToProps = (state, ownProps) => ({\n  pos: getEnemyPos(state, ownProps.id)\n});\n\nexport default React.memo(connect(mapStateToProps)(Enemy));\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Enemy from \"./Enemy\";\nimport { getEnemyIds } from \"../../selectors/enemySelectors\";\n\nconst Enemies = ({ enemyIds }) =>\n  enemyIds.map(id => <Enemy key={id} id={id}></Enemy>);\n\nconst mapStateToProps = state => ({\n  enemyIds: getEnemyIds(state)\n});\n\nexport default React.memo(connect(mapStateToProps)(Enemies));\n","import React from \"react\";\nimport \"./GameOverlay.css\";\n\nconst GameOverlay = ({ children }) => <div className=\"overlay\">{children}</div>;\n\nexport default GameOverlay;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Player from \"../Player\";\nimport Enemies from \"../Enemies\";\nimport GameOverlay from \"../GameOverlay\";\nimport * as gameActions from \"../../actions/gameActions\";\nimport * as gameSelectors from \"../../selectors/gameSelectors\";\nimport config from '../../config';\nimport \"./Board.css\";\n\nconst Board = ({\n  startGame,\n  resetGame,\n  isGameStarted,\n  isGameActive,\n  isGamePaused,\n  isGameOver,\n  score\n}) => {\n  const renderOverlay = () => {\n    if (!isGameStarted) {\n      return (\n        <GameOverlay>\n          <button onClick={() => startGame()}>Start game</button>\n        </GameOverlay>\n      );\n    }\n    if (isGamePaused) {\n      return (\n        <>\n          <GameOverlay>\n            <h1>GAME PAUSED</h1>\n            <button onClick={() => startGame()}>RESUME</button>\n            <button onClick={() => resetGame()}>RESTART</button>\n          </GameOverlay>\n        </>\n      );\n    }\n    if (isGameOver) {\n      return (\n        <GameOverlay>\n          <h1>GAME OVER</h1>\n          <h2>SCORE: {score}</h2>\n          <button onClick={() => resetGame()}>Play again</button>\n        </GameOverlay>\n      );\n    }\n  };\n\n  return (\n    <div className=\"board\" style={{height: config.boardHeight, width: config.boardWidth}}>\n      {!isGameActive && renderOverlay()}\n      {isGameStarted && (\n        <>\n          <Player />\n          <Enemies />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isGameStarted: gameSelectors.isGameStarted(state),\n  isGameActive: gameSelectors.isGameActive(state),\n  isGamePaused: gameSelectors.isGamePaused(state),\n  isGameOver: gameSelectors.isGameOver(state),\n  score: gameSelectors.getCurrentScore(state)\n});\n\nconst mapDispatchToProps = {\n  startGame: gameActions.startGame,\n  resetGame: gameActions.resetGame\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getCurrentScore, getHighscore } from \"../../selectors/gameSelectors\";\nimport \"./ScoreCard.css\";\n\nconst ScoreCard = ({ score, highscore }) => (\n  <div className=\"score-card\">\n    <h3>Score: {score}</h3>\n    <h3>High Score: {highscore}</h3>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  score: getCurrentScore(state),\n  highscore: getHighscore(state)\n});\n\nexport default connect(mapStateToProps)(ScoreCard);\n","import React from \"react\";\nimport \"./GameInfo.css\";\n\nconst GameInfo = () => (\n  <div className=\"game-info\">\n    <p>Use arrow keys to move</p>\n    <p>Press ESC / SPACE key to pause</p>\n  </div>\n);\n\nexport default GameInfo;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./configureStore\";\nimport Board from \"./components/Board\";\nimport ScoreCard from \"./components/ScoreCard\";\nimport GameInfo from \"./components/GameInfo\";\nimport \"./App.css\";\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <div>\n          <Board />\n          <GameInfo />\n        </div>\n        <ScoreCard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./fonts/ARCADECLASSIC.woff\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}